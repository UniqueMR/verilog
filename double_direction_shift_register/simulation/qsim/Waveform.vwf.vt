// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2020 16:17:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          double_direction_shift_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module double_direction_shift_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CP;
reg [3:0] D;
reg DSL;
reg DSR;
reg S0;
reg S1;
// wires                                               
wire [3:0] Q;

// assign statements (if any)                          
double_direction_shift_register i1 (
// port map - connection between master ports and signals/registers   
	.CP(CP),
	.D(D),
	.DSL(DSL),
	.DSR(DSR),
	.Q(Q),
	.S0(S0),
	.S1(S1)
);
initial 
begin 
#1000000 $finish;
end 

// CP
always
begin
	CP = 1'b0;
	CP = #50000 1'b1;
	#50000;
end 
// D[ 3 ]
initial
begin
	repeat(33)
	begin
		D[3] = 1'b0;
		D[3] = #15000 1'b1;
		# 15000;
	end
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	repeat(16)
	begin
		D[2] = 1'b0;
		D[2] = #30000 1'b1;
		# 30000;
	end
	D[2] = 1'b0;
	D[2] = #30000 1'b1;
end 
// D[ 1 ]
initial
begin
	repeat(11)
	begin
		D[1] = 1'b0;
		D[1] = #45000 1'b1;
		# 45000;
	end
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	repeat(8)
	begin
		D[0] = 1'b0;
		D[0] = #60000 1'b1;
		# 60000;
	end
	D[0] = 1'b0;
end 

// DSL
always
begin
	DSL = 1'b0;
	DSL = #100000 1'b1;
	#100000;
end 

// DSR
initial
begin
	repeat(6)
	begin
		DSR = 1'b0;
		DSR = #37500 1'b1;
		# 112500;
	end
	DSR = 1'b0;
	DSR = #37500 1'b1;
end 

// S0
initial
begin
	S0 = 1'b1;
	S0 = #480000 1'b0;
end 

// S1
initial
begin
	S1 = 1'b1;
	S1 = #260000 1'b0;
	S1 = #220000 1'b1;
	S1 = #240000 1'b0;
end 
endmodule

